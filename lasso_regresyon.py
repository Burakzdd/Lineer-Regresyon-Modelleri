# -*- coding: utf-8 -*-
"""Lasso_Regresyon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CZ33rxlnaPySQ2Bf0q-8tQiGK_L91iSO

#Lasso Regresyon

Amaç hata kareler toplamını minimize eden katsayıları bu katsayılara bir ceza uygulayarak bulmaktır
"""

import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import Lasso

hit = pd.read_csv("/content/Hitters.csv")
df = hit.copy()
df = df.dropna()
dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])
y = df["Salary"]
X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')
X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                                    test_size=0.25, 
                                                    random_state=42)

lasso_model = Lasso(alpha = 0.1).fit(X_train, y_train)

lasso_model

lasso_model.coef_

lasso = Lasso()
lambdalar = 10**np.linspace(10,-2,100)*0.5 
katsayilar = []

for i in lambdalar:
    lasso.set_params(alpha=i)
    lasso.fit(X_train, y_train)
    katsayilar.append(lasso.coef_)
    
ax = plt.gca()
ax.plot(lambdalar*2, katsayilar)
ax.set_xscale('log')
plt.axis('tight')
plt.xlabel('alpha')
plt.ylabel('weights')

"""#Tahmin etme"""

lasso_model.predict(X_test)

y_tahmin = lasso_model.predict(X_test)

np.sqrt(mean_squared_error(y_test, y_tahmin))

"""##Model Ayarlama"""

from sklearn.linear_model import LassoCV

lasso_cv_model = LassoCV(alphas = None, 
                         cv = 10, 
                         max_iter = 10000, 
                         normalize = True)

lasso_cv_model.fit(X_train,y_train)

lasso_cv_model.alpha_

lasso_ayar = Lasso(alpha = lasso_cv_model.alpha_)

lasso_ayar.fit(X_train,y_train)

y_tahmin = lasso_ayar.predict(X_test)

np.sqrt(mean_squared_error(y_test, y_tahmin))

