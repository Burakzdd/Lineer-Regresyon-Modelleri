# -*- coding: utf-8 -*-
"""Ridge_Regresyon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gGyYky_g9FCTUfHuSQ_rKLUzTtc2xwC5

#Ridge Regresyon

Bu regresyon yönteminde amaç, hata kareler toplamını minimize eden katsayıları bu katsayılara bir ceza uygulayarak bulmaktır

##Model Oluşturma
"""

import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score

hit = pd.read_csv("/content/Hitters.csv")
df = hit.copy()
df = df.dropna()
dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])
y = df["Salary"]
X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')
X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                                    test_size=0.25, 
                                                    random_state=42)

from sklearn.linear_model import Ridge

ridge_model = Ridge(alpha = 0.1).fit(X_train, y_train)

ridge_model

ridge_model.coef_

lambdalar = 10**np.linspace(10,-2,100)*0.5 

ridge_model = Ridge()
katsayilar = []

for i in lambdalar:
    ridge_model.set_params(alpha = i)
    ridge_model.fit(X_train, y_train) 
    katsayilar.append(ridge_model.coef_) 
    

    
ax = plt.gca()
ax.plot(lambdalar, katsayilar) 
ax.set_xscale('log') 

plt.xlabel('Lambda(Alpha) Değerleri')
plt.ylabel('Katsayılar/Ağırlıklar')
plt.title('Düzenlileştirmenin Bir Fonksiyonu Olarak Ridge Katsayıları');

"""##Model tahmin"""

#tahmin değerini bulma işlemi
y_tahmin = ridge_model.predict(X_test)

np.sqrt(mean_squared_error(y_test, y_tahmin))

"""##Model Ayarlama"""

lambdalar = 10**np.linspace(10,-2,100)*0.5

lambdalar[0:5]

from sklearn.linear_model import RidgeCV
ridge_cv = RidgeCV(alphas = lambdalar, 
                   scoring = "neg_mean_squared_error",
                   normalize = True)

ridge_cv.fit(X_train, y_train)

ridge_cv.alpha_

ridge_tuned = Ridge(alpha = ridge_cv.alpha_, 
                   normalize = True).fit(X_train,y_train)

np.sqrt(mean_squared_error(y_test, ridge_tuned.predict(X_test)))